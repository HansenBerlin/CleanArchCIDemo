@page "/"
@inject IUserAuthenticationInteractor _authentication;
@inject ISessionService _sessionService;
@using PaymentCore.Emuns
@using PaymentCore.Entities
@using PaymentCore.Interfaces
@using PaymentCore.UseCases
@using PaymentWebClient.Models
@using PaymentWebClient.SessionService

<MudText Align="Align.Center" Typo="Typo.h1" Style="margin-bottom: 50px">Payment App</MudText>
<MudTabs Rounded="true" Centered="true" Elevation="0" Outlined="true" @ref="_tabs" ApplyEffectsToContainer="true" PanelClass="pa-12">
    <MudTabPanel Text="Login" Icon="@Icons.Material.Filled.Login">
        <LoginView @ref="_loginView" OnClickCallback="@LoginButtonClick"/>
    </MudTabPanel>
    <MudTabPanel Text="Register" Icon="@Icons.Material.Filled.AccountCircle">
        <RegisterView @ref="_registerView"/>
    </MudTabPanel>
    <MudTabPanel Text="Send Funds" Icon="@Icons.Material.Filled.Send">
        <SendFundsView @ref="_sendFundsView"/>
    </MudTabPanel>
    <MudTabPanel Text="Deposit Funds" Icon="@Icons.Material.Filled.Money">
        <DepositFundsView @ref="_depositView"/>
    </MudTabPanel>
    <MudTabPanel Text="Logout" Icon="@Icons.Material.Filled.Logout">
        <MudText>Logout @_user.Name</MudText>
        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="Logout">Logout</MudButton>
    </MudTabPanel>
</MudTabs>
<div style="margin-top: 35px">
@if (_user.AuthState == AuthenticationState.LoggedIn)
    {
        <MudChip Color="Color.Success">@_user.AuthState as @_user.Name</MudChip>
    }
    else
    {
        <MudChip Color="Color.Error">@_user.AuthState</MudChip>
    }    
</div>



@code 
{
    private MudTabs _tabs;
    private LoginView _loginView = new();
    private RegisterView _registerView;
    private DepositFundsView _depositView;
    private SendFundsView _sendFundsView;
    
    private IUser _user = new UserEntity();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //_registerView.RegisterUserEvent += async (_, m) => await RegisterButtonClick(m); 
            //_sendFundsView.SendFundsEvent += async (_, p) => await SendFundsClick(p); 
            //_depositView.DepositFundsEvent += async (_, p) => await DepositFundsClick(p);

            _user = _sessionService.User;
            
            UpdateTabVisibilityState();
            
            StateHasChanged();
        }
    }

    private void UpdateTabVisibilityState()
    {
        if (_user.AuthState == AuthenticationState.LoggedIn)
        {
            _tabs.Panels[0].Disabled = true;    
            _tabs.Panels[1].Disabled = true;    
            _tabs.Panels[2].Disabled = false;    
            _tabs.Panels[3].Disabled = false;    
            _tabs.Panels[4].Disabled = false;
            _tabs.ActivatePanel(2);
        }
        else
        {
            _tabs.Panels[0].Disabled = false;    
            _tabs.Panels[1].Disabled = false;    
            _tabs.Panels[2].Disabled = true;    
            _tabs.Panels[3].Disabled = true;    
            _tabs.Panels[4].Disabled = true;
            _tabs.ActivatePanel(0);
        }
    }


    private async Task LoginButtonClick(RegisterAccountForm model)
    {
        var result = await _authentication.Authenticate(model.Username, model.Password);
        _user.CopyProperties(result);
        UpdateTabVisibilityState();

        StateHasChanged();
    }
    
    private async Task RegisterButtonClick(RegisterAccountForm model)
    {
        var result = await _authentication.Register(model.Password, model.Username);
        _user.CopyProperties(result);
        UpdateTabVisibilityState();

        StateHasChanged();
    }

    private async Task DepositFundsClick(IPayment payment)
    {
    }

    

    private void Logout()
    {
        _user.AuthState = AuthenticationState.LoggedOut;
        UpdateTabVisibilityState();
        StateHasChanged();
    }
}