@page "/"
@inject IUserAuthenticationInteractor _authentication;
@inject ISessionService _sessionService;
@using System.ComponentModel.DataAnnotations
@using System.Diagnostics
@using PaymentCore.Emuns
@using PaymentCore.Entities
@using PaymentCore.Interfaces
@using PaymentCore.UseCases
@using PaymentWebClient.SessionService

<MudText Align="Align.Center" Typo="Typo.h1" Style="margin-bottom: 25px">Payent App</MudText>

<MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary" @ref="tabs">


    <MudTabPanel Text="Register" Icon="@Icons.Material.Filled.AccountCircle">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <MudGrid>
                <MudItem md="12">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField Label="Username" HelperText="Upper and lower case will be ignored"
                                          @bind-Value="model.Username" For="@(() => model.Username)"/>
                            <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                          @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password"/>
                            <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                                          @bind-Value="model.Password2" For="@(() => model.Password2)" InputType="InputType.Password"/>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="RegisterButtonClick">Register</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudTabPanel>
    <MudTabPanel Text="Login" Icon="@Icons.Material.Filled.Login">
        <EditForm Model="@model2" OnValidSubmit="OnValidSubmit2">
            <DataAnnotationsValidator/>
            <MudGrid>
                <MudItem md="12">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField Label="Username" HelperText="Upper and lower case will be ignored"
                                          @bind-Value="model2.Username" For="@(() => model2.Username)"/>
                            <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                          @bind-Value="model2.Password" For="@(() => model2.Password)" InputType="InputType.Password"/>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="LoginButtonClick">Login</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudTabPanel>
    <MudTabPanel Text="Send Funds" Icon="@Icons.Material.Filled.Send">
        <MudPaper>
            <MudGrid>
                <MudItem sm="7">
                    <EditForm Model="@paymentModel" OnValidSubmit="OnValidSubmit3">
                        <DataAnnotationsValidator/>
                        <MudCard>
                            <MudCardContent>
                                <MudNumericField @bind-Value="paymentModel.Amount" For="@(() => paymentModel.Amount)" Label="Amount to send" Format="F1" Variant="Variant.Text" Min="0" HideSpinButtons="true"/>
                                <MudNumericField @bind-Value="paymentModel.ToAccountId" For="@(() => paymentModel.ToAccountId)" Label="Send to account id" Variant="Variant.Text" Min="0" HideSpinButtons="true"/>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="RegisterButtonClick">Send</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </EditForm>
                </MudItem>
                <MudItem sm="5">
                    @if (user.AuthState == AuthenticationState.LoggedIn)
                    {
                        <SavingsAccountView/>
                    }
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudTabPanel>
    <MudTabPanel Text="Deposit Funds" Icon="@Icons.Material.Filled.Money">
        <MudPaper>
            <MudGrid>
                <MudItem sm="7">
                    <EditForm Model="@paymentModel" OnValidSubmit="OnValidSubmit3">
                        <DataAnnotationsValidator/>
                        <MudCard>
                            <MudCardContent>
                                <MudNumericField @bind-Value="paymentModel.Amount" For="@(() => paymentModel.Amount)" Label="Amount to deposit" Format="F1" Variant="Variant.Text" Min="0" HideSpinButtons="true"/>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="RegisterButtonClick">Send</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </EditForm>
                </MudItem>
                <MudItem sm="5">
                    @if (user.AuthState == AuthenticationState.LoggedIn)
                    {
                        <SavingsAccountView/>
                    }
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudTabPanel>
    <MudTabPanel Text="Logout" Icon="@Icons.Material.Filled.Logout">
        <MudText>Content One</MudText>
    </MudTabPanel>


</MudTabs>
<MudPaper Style="margin-top: 25px">
    @if (user.AuthState == AuthenticationState.LoggedIn)
    {
        <MudChip Color="Color.Success">@user.AuthState as @user.Name</MudChip>
    }
    else
    {
        <MudChip Color="Color.Error">@user.AuthState</MudChip>
    }
</MudPaper>


@code 
{
    MudTabs tabs;
    double? nullableDouble;
    private RegisterAccountForm model = new();
    private RegisterAccountForm model2 = new();
    private IUser user;
    bool success;
    bool isLoggedIn = false;

    public IPayment paymentModel = new PaymentEntity();
    
    protected void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (user.AuthState == AuthenticationState.LoggedIn)
            {
                tabs.Panels[0].Disabled = true;    
                tabs.Panels[1].Disabled = true;    
                tabs.Panels[2].Disabled = false;    
                tabs.Panels[3].Disabled = false;    
                tabs.Panels[4].Disabled = false;
                tabs.ActivatePanel(2);
            }
            else
            {
                tabs.Panels[0].Disabled = false;    
                tabs.Panels[1].Disabled = false;    
                tabs.Panels[2].Disabled = true;    
                tabs.Panels[3].Disabled = true;    
                tabs.Panels[4].Disabled = true;
                tabs.ActivatePanel(0);
            }
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        user = _sessionService.User;
        
    }

    public class RegisterAccountForm
    {
        [Required]
        public string Username { get; set; }

        [Required]
        [StringLength(12, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 12)]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }

    }

    private async Task OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }
    
    private async Task OnValidSubmit2(EditContext context)
    {
        return;
        success = true;
        var result = await _authentication.Authenticate(model2.Username, model2.Password);
        user.CopyProperties(result);
        if (user.AuthState == AuthenticationState.LoggedIn)
            isLoggedIn = true;
        StateHasChanged();
    }

    private async Task LoginButtonClick()
    {
        success = true;
        var result = await _authentication.Authenticate(model2.Username, model2.Password);
        user.CopyProperties(result);
        if (user.AuthState == AuthenticationState.LoggedIn)
        {
            _sessionService.UserName = model2.Username;
            tabs.Panels[0].Disabled = true;    
            tabs.Panels[1].Disabled = true;    
            tabs.Panels[2].Disabled = false;    
            tabs.Panels[3].Disabled = false;    
            tabs.Panels[4].Disabled = false;
            tabs.ActivatePanel(2);
        }
        else
        {
            
            Debug.WriteLine("test");
        }
        StateHasChanged();
    }
    
    private async Task RegisterButtonClick()
    {
        success = true;
        var result = await _authentication.Register(model.Password, model.Username);
        user.CopyProperties(result);
        if (user.AuthState == AuthenticationState.LoggedIn)
        {
            _sessionService.UserName = model.Username;
            tabs.Panels[0].Disabled = true;    
            tabs.Panels[1].Disabled = true;    
            tabs.Panels[2].Disabled = false;    
            tabs.Panels[3].Disabled = false;    
            tabs.Panels[4].Disabled = false;
            tabs.ActivatePanel(2); 
        }
        else
        {
            
            Debug.WriteLine("test");
        }
        StateHasChanged();
    }

    private void OnValidSubmit3()
    {
        throw new NotImplementedException();
    }
}